This file was last updated on November 13th, 2001

This README will explain how you can quickly develop Geeklog Plug-ins.  Please take the time to read this as this will save you time and possibly trouble with getting your Geeklog Plug-in to work.

Contents
--------
1) Overview of Geeklog Plugin Implementation
2) Description of the Geeklog Plugin API
3) Plugin Functions You Implement
4) Implementing your Admin Interface
5) Preparing your Geeklog Plugin Distribution
6) Deliver Your Plugin!

1) Overview of Geeklog Plugin Implementation
--------------------------------------------

Geeklog is becoming more and more popular each day and we, the Geeklog developers, are amazed at some of the great hacks people have made to extend their Geeklog installation to fit their own needs.  At the same time, the Geeklog development team is continually adding new features that make Geeklog even better.  We have realized the need for Geeklog to support two threads of development: core geeklog code and plugin-code.  By building in the infrastructure needed to extend Geeklog's functionality through plugins we can make a clean seperation between the Geeklog codebase and plugin code so that we can concentrate on making Geeklog's core code better while others can develop plugins so that Geeklog fits their needs.  With that said, Geeklog now has a Plugin application program interface (API).

At the highest level, the Geeklog Plugin API is generic code that is called in strategic places in the Geeklog codebase that allow function of plugins to be called.  This will allow your plugin the following features:

- Ability for your plugin to be submission-based so that users can submit objects to your plug-in.  You can then visit the command and control center in Geeklog to moderate the submissions for your plugin

- Allow your plugin to show up in the Admin block and User block on each Geeklog page

- Allow your plugin to be searched via the Geeklog search page

- Allow stats for your plugin to show up on the site statistics page

- Allow your plugin the ability to use Geeklog's comment engine

- Allow you to use the power of Geeklog's code library (common.php) in your own plugin code

- Allow you full flexibility on what your plugin does

2) Description of the Geeklog Plugin API
----------------------------------------

This is the function reference for the Geeklog Plugin API.  This is provided strictly for reference sake. You, as a Geeklog Plugin Developer, will not need to modify these functions nor make calls to them as that has already been handled in the Geeklog codebase. We do, however, encourage suggestions on how you think we can make this API better.

Moderation Functions
--------------------

These are the functions used to allow your plugin to moderation-based

Function: SubmitPlugin
Description: This function loops through all enabled plugins and calls the plugins plugin_submit_<plugin name> method so that a plugins submission form is shown to the user.

Function: GetPluginModerationValues
Description: Responsible for calling the plugin_moderationvalue_<plugin name> method so that the plugin specific values can be set so that moderation can occur.

Function: ShowPluginModerationLists
Description: Loops through all enabled plugins and call itemlist() so that all items needing moderation for the plugin shows up in moderation.php

Function: ShowPluginModerationOptions
Description: Loops through all enabled plugins and calls the plugin_cclabel_<plugin name> method so the plugin shows in the command and control center.

Function: SavePluginSubmission
Description: Loops through all enabled plugins and calls the plugin_savesubmission_<plugin name> method so that the plugin submission for a specified plugin gets saved.

Function: DoPluginModerationDelete
Description: Calls the plugin_moderationdelete_<plugin name> method of a specifid plugin so that a submission is deleted

Function: DoPluginModerationApprove
Description: Calls the plugin_moderationapprove_<plugin name> method of a specified plugin so that the submission is approved

These are the functions to implement admin and user options for plugins
-----------------------------------------------------------------------

Function: ShowPluginAdminOptions
Description: Loops through all enabled plugins and calls their plugin_showadminoption_<plugin name> so that the plugin shows any option(s) they need under the Admin block.

Function: ShowPluginUserOptions
Description: Loops through all enabled plugins and calls their plugin_getuseroption_<plugin name> so that the plugin shows any option(s) users need in their User Functions block

Function: HandlePluginAdminEdit
Description: calls the plugin_adminedit_<plugin name> method so that the "new <plugin name> | Admin Home" links show up at the top of admin/plugins/<plugin name>.php.  This is implemented strictly for consistency of the UI

Function: GetPluginSubmissionCounts
Description: loops through all enabled plugins and calls their plugin_submissioncount_<plugin name> method so that the number of submissions for plugins gets displayed

These functions implement searching functionality for plugins
-------------------------------------------------------------

Function: GetPluginSearchTypes 
Description: loops through all enabled plugins and calls their plugin_getsearchtypes_<plugin name> method to get any plugin specific values that need to show up in the Type drop down on search.php

Function: DoPluginSearches
Description: loops through all enabled plugins and submits the search criteria to the plugin_dopluginsearch_<pluginname> method so that the plugin can perform it's own search

This function implements showing statistics for plugins on the site statistics page
-----------------------------------------------------------------------------------

Function: Show Plugin Stats
Description: loops through all enabled plugins and calls the plugin's plugin_showstats_<plugin name> method so that statistics can be reported for the plugin

3) Plugin Functions You Implement
---------------------------------

The best way to learn how to implement a Geeklog plugin is to use an existing plugin, see how it works and change it to fit your needs.  Included with this distribution of Geeklog is a sample plugin file called ?? that you can install so that you have a working example of a Geeklog plugin to work from.

NOTE about <plugin name>:  You will see references to <plugin name> in all the functions below.  The <plugin name> values will come from you the name of your plugin tarfile.  All plugin tarfiles have a strict naming convention that they MUST follow and it is:

<plugin name>_<plugin version>_<geeklog version>.tar.gz

e.g. photos_0.1_1.2.2.tar.gz

MODERATION IMPLEMENTATION
-------------------------

First note that there are limitations in the current Geeklog codebase that will force you to name your plugin tables used for submission in a specific manner.  All moderated Geeklog items such as stories and links are comprised of two tables.  The first is a main table where all visible items are stored.  The second is a submission table where submitted user items sit until an administrator approves them.  When approved the item is moved from the submission table to the main table.  So for example, if you are writing a book review plugin that allows users to submit book reviews then we will pick bookreviews for your main table (this MUST also be your plugin name you pick) and then your submission table MUST be named bookreviewssubmission.  Why force the names? Because in the geeklog code the submission table for all stories is coded as <main name>submission.  So since we picked bookreviews for our main table (and plugin name) the submission table must be named  bookreviewssubmission.

Moderation Functions: If you want your plugin to be moderated like Geeklog stories and links then you
must implement these functions.  

Function: plugin_submit_<plugin name>
Description: shows the submission form for your plugin

Function: plugin_itemlist_<plugin name>
Descriptions:  shows any items needing moderation for your plugin on moderation.php

Function: plugin_savesubmission_<plugin name>
Description: saves submitted item from a user in <plugin name>submission table

Function: plugin_moderationdelete_<plugin name>
Description: takes an ID into <plugin name>submission table and deletes it

Function: plugin_moderationapprove_<plugin name>
Description: takes an ID into <plugin name>submission and moves it to the main table called <plugin name>

Function: plugin_moderationvalues_<plugin name>
Description: returns the primary key column name, the main table name (called <plugin name>) and the list of fields from that table that you'd like to have show up on the moderation page.

ADMIN/USER UI CHANGES
---------------------

If you want your plugin to effect the Admin and User Function blocks that show up on every Geeklog page then you must implement thse functions

Function: plugin_adminoptions_<plugin name>
Description: will show options under the Admin Functions block for your plugin

Function: plugin_showuseroptions_<plugin name>
Description: will show options under teh User Functions block for your plugin

Function: plugin_adminedit_<plugin name>
Description: Shows the links at the top of admin/plugins/<plugin name>.php for New and admin home. This is for consistency sake only

Function: plugin_submissioncount_<plugin name>
Description: Shows the number of submissions pending for you plugin.  This is usually just "dbcount(<plugin name>submission);"

Function: plugin_cclabel_<plugin name>
Description: returns array of your plugin image and a label for your plugin.  This is called to show your plugin in the command and control block on moderation.php

SEARCH FUNCTIONS
----------------

If you want your plugin to be searchable, implement these functions

Function: plugin_getsearchtypes_photos
Description: you will probably want to add a new type in teh Type drop down on search.php.  This function prints the option tags needed. make sure that the value tag is <plugin name>

Function: plugin_dopluginsearch_<plugin name>
Description: takes the search criteria and lets you build search results for your plugin.  This returns a string array of table rows, one row for each record returned by your search.

Function: plugin_showstats_<plugin name>
Description: This function takes a showsitestats flag.  If set to 1, this function shows the overall stats for your plugin in the site statistics box.  If it is set to 2 it shows the statistic blocks for you plugin (similar to Top Ten Viewed Stories and Top Ten Commented Stroes).

4) Implementing your Admin Interface
------------------------------------

The Geeklog Plugin API is just that an API.  You obviously have to write all your plugin code yourself.  We have put stubs in place to link to you Admin Interface.  You admin page(s) will be in http://yourgeeklogdomain/admin/plugins/<plugin name>/

The first page of your administration interface must be named <plugin name>.php and it must be in the above directory.  Whether or not you use more that one page for you Admin interface is completely up to you.  

Please note that the location of your admin page isn't optional.  For organizational purposes it is important that you follow the standards outlined in this document.

5) Preparing your Geeklog Plugin Distribution
---------------------------------------------

The plugin tarfile
------------------

All Geeklog plugin tarfiles MUST use the following naming convention:

<plugin name>_<plugin version>_<geeklog version>.tar.gz

Descriptions

<plugin name>: this is one of the single most important values you will choose for your plugin as it dictates the following:
- the exact API function names that the Geeklog code will try to call for your plugin
- the exact directory within the webtree to put all your plugin code
- the exact directory within the admin directory to put your admin code
- if using moderation, the exact table name main table being moderated
- if using moderation, the submission table will be <plugin name>submission

<plugin version>: used during the installation process to determine if you are attempting to upgrade a plugin or do a new installation. It is also check to verify that you aren't trying to install and old version of the plugin when a new installation already exists.

<geeklog version>: this is the geeklog version the plugin works under.

The organization of your tarfile is standardized as well.  For each directory and file a description is given.  Your base plugin directory when you create the tarfile should be <plugin name>.  Under there you will have the following:

config.php: configuration page for your plugin.  We'd prefer you to data-drive most the values if possible but using config.php is fine.  This file can be called whatever you want...you are not restricted.

functions.inc: this is the file where you implement the Geeklog API and where your plugin code should reside.  It MUST be named this because we automatically include all enabled plugins function.inc files at the bottom of common.php.  Note that this means you haveaccess to all the functions in common.php in your plugin code.

lang.php: the language file for your plugin.  You should include this file in your functions.inc.

table.sql the DDL needed to modify the Geeklog database so that your plugin will work. NOTE: you must provide an entry in the plugin table in your database.  Without it, Geeklog will not know you plugin exists.  Example:
REPLACE INTO plugins (pi_name, pi_version, pi_gl_version, pi_homepage, pi_enabled) VALUES ('photos', '0.1', '1.2.2', 'http://www.tonybibbs.com', 1);

data.sql sample data for your plugin

README standard readme for software

/docs: includes any documentation you may want to provide for your plugin such as history, to-do, etc

/admin: includes only your admininstation pages

/public_html: include your regular web pages

/updates: includes all update sql and scripts.  if you are writing an update SQL script be sure that you name it update_<previous version>.sql.  The way this work is if you have version 0.1 installed for a plugin and you are installing version 0.2 the code will look for the update script for the currently isntalled version (0.1) and if it finds it, in this case update_0.1.sql then it will execute it automatically

How Geeklog Installs Plugins
----------------------------

Assuming you followed the tarfile format from above this is how Geeklog installs the plugin.

1) when use submits the tarfile from admin/plugins.php, the tarfile is copied to /path/to/geeklog/plugins/
2) the tarfile is uncompressed
3) the public_html directory in the tarfile is copied to the webtree under <plugin name>. e.g. if my geeklog web is in /path/to/geeklog/public_html/ then the public_html from the tarfile is copied to /path/to/geeklog/public_html/<plugin name>
4) the admin directory in the tarfile is copied to the admin webtree.  e.g. if my geeklog admin webtree is in /path/to/geeklog/public_html/admin/ then the admin directory from the tarfile is copied to /path/to/geeklog/public_html/admin/plugins/<plugin name>  
5) if this is a new install (plugin doesn't exist in plugins table) then table.sql is executed and then data.sql is executed
6) if this is an upgrade that the necessary upgrade_<version>.sql script is searched for and, if found, executed.

That's it!

6) Deliver Your Plugin!
-----------------------

Because Geeklog Plugins can affect a Geeklog installation and the users filesystem, our policy is we will not endorse third party plugins unless they have been tested by the Geeklog Development team.  Why?  We will make sure that your plugin installs successfully and doesn't have any adverse behavior.  Assuming your plugin checks out, we will put your tarfile on our site where it can be downloaded by Geeklog users.  You can sumbit your plugin to our site at http://geeklog.sourceforge.net
